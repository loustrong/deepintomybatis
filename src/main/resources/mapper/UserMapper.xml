<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tom.example.deepintomybatis.dao.UserDao">
    <!-- 开启二级缓存 -->
<!--    一级缓存命中的条件:-->
<!--    1. 同一会话(同一个sqlSession, 所以要开启事务)-->
<!--    2. 同一个mapper接口,相同的参数-->
<!--    3. 同一个mybatis环境(如: 一个使用生产环境, 一个使用开发环境配置文件)-->
<!--    二级缓存命中的条件:-->
<!--    1. 同一个mapper接口,相同的参数-->
<!--    2. 同一个mybatis环境(如: 一个使用生产环境, 一个使用开发环境配置文件)-->

    <cache />
    <select id="getUserById" parameterType="Integer" resultType="com.tom.example.deepintomybatis.entity.User">
        SELECT * FROM tb_user WHERE id = #{id}
    </select>
    <select id="getMaxId"  resultType="Integer">
        SELECT MAX(id) FROM tb_user;
    </select>
    <!--
    id="save" 是唯一的标识符
    parameterType属性指明插入时使用的参数类型
    useGeneratedKey="true"表示使用数据库的自动增长策略
    -->
    <insert id="save"  parameterType="com.tom.example.deepintomybatis.entity.User" useGeneratedKeys="true" >
        INSERT INTO tb_user( userName, age, sex)
        VALUES ( #{userName},#{age}, #{sex})
    </insert>

    <!-- insert操，
    parameterType="user"表示该插入语句需要一个user对象作为参数
    useGeneratedKeys="true"表示使用自动增长的主键 -->
    <insert id="saveUser" parameterType="com.tom.example.deepintomybatis.entity.User"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tb_user(userName,age,sex)
        VALUES(#{userName},#{age},#{sex})
    </insert>

    <!-- update操作
parameterType="user"表示该更新语句需要一个user对象作为参数-->
    <update id="modifyUser" parameterType="com.tom.example.deepintomybatis.entity.User">
        UPDATE tb_user
        SET userName = #{userName},sex = #{sex},age = #{age}
        WHERE id = #{id}
    </update>

     <!--delete操作 parameterType="int"表示该查询语句需要一个int类型的参数-->
    <delete id="removeUser" parameterType="int">
        DELETE FROM tb_user WHERE id = #{id}
    </delete>

    <!-- select操作
resultType="map"表示返回的是一个Map对象
使用列名做key，值做value -->
    <select id="selectUserMap" resultType="map">
        SELECT * FROM tb_user
    </select>



    <!-- 映射学生对象的resultMap -->
    <resultMap id="studentResultMap" type="com.tom.example.deepintomybatis.entity.Student">
        <id property="id" column="id" />
        <result property="name" column="name"/>
        <result property="sex" column="sex"/>
        <result property="age" column="age"/>
        <!-- 关联映射 -->
        <association property="clazz" column="clazz_id"
                     javaType="com.tom.example.deepintomybatis.entity.Clazz"
                     select="selectClazzWithId"/>
    </resultMap>

    <!-- 根据班级id查询班级 -->
    <select id="selectClazzWithId" resultType="com.tom.example.deepintomybatis.entity.Clazz">
        SELECT * FROM TB_CLAZZ where id = #{id}
    </select>
    <!-- 查询所有学生信息 -->
    <select id="selectStudent" resultMap="studentResultMap">
        SELECT * FROM TB_STUDENT
    </select>


    <!-- 映射班级对象的resultMap -->
    <resultMap id="clazzResultMap" type="com.tom.example.deepintomybatis.entity.Clazz">
        <id property="id" column="id" />
        <result property="code" column="code"/>
        <!-- 班级的学生属性，因为一个班级有多个学生，所以该属性是一个集合 -->
        <collection property="students" javaType="ArrayList"
                    column="id" ofType="com.tom.example.deepintomybatis.entity.Student"
                    select="selectStudentWithId"/>
    </resultMap>

    <!-- 根据班级id查询学生 -->
    <select id="selectStudentWithId" resultType="com.tom.example.deepintomybatis.entity.Student">
        SELECT * FROM TB_STUDENT where clazz_id = #{id}
    </select>

    <!-- 查询所有班级信息 -->
    <select id="selectClazz" resultMap="clazzResultMap">
        SELECT * FROM TB_CLAZZ
    </select>

</mapper>